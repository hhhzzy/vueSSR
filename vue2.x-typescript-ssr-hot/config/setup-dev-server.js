const path = require('path')
const fs = require('fs')
const chokidar = require('chokidar')
const webpack = require('webpack')
const devMidlleware = require('webpack-dev-middleware')
module.exports = (app, callback) => {
    let ready
    const onReady = new Promise(r => (ready = r))

    let template, serverBundle, clientManifest
    // 监听构建 -> 更新renderer
    const update = () => {
        if (template && serverBundle && clientManifest) {
            ready()
            callback(template, serverBundle, clientManifest)
        }
    }

    // 监听构建 template，调用 update 更新 Renderer
    const templatePath = path.resolve(__dirname, '../src/index_ssr.html')
    template = fs.readFileSync(templatePath, 'utf-8')
    update()
    chokidar.watch(templatePath).on('change', () => {
        template = fs.readFileSync(templatePath, 'utf-8')
        update()
    })
    // 监听服务端构建serverBundle，调用 update 更新 Renderer
    const serverConfig = require('./webpack.server.config')
    const serverCompiler = webpack(serverConfig)
    const serverDevMidlleware = devMidlleware(serverCompiler, {})
    // 直接打包到磁盘中
    // serverCompiler.watch({}, (err, stats) => {
    //     console.log(serverConfig, stats, 454545)
    //     if (err) throw err
    //     if (stats.hasErrors()) return
    //     // read bundle generated by vue-ssr-webpack-plugin
    //     serverBundle = JSON.parse(fs.readFileSync('./dist/vue-ssr-server-bundle.json', 'utf-8'))
    //     // 更新 Renderer
    //     update()
    // })
    serverCompiler.hooks.done.tap('server', () => {
        serverBundle = JSON.parse(serverDevMidlleware.context.outputFileSystem.readFileSync('./dist/vue-ssr-server-bundle.json'))
        // 更新 Renderer
        update()
    })
    // 监听客户端构建 clientManifest，调用 update 更新 Renderer
    const hotMiddleware = require('webpack-hot-middleware')
    const clientConfig = require('./webpack.client.config')
    // ====================== 热更新配置 ============================
    clientConfig.plugins.push(new webpack.HotModuleReplacementPlugin())
    clientConfig.entry.app = ['webpack-hot-middleware/client?reload=true&quiet=true', clientConfig.entry.app]
    clientConfig.output.filename = '[name].js'
    // ======================== /热更新配置 ==========================
    const clientCompiler = webpack(clientConfig)
    const clientDevMiddleware = devMidlleware(clientCompiler, {
        publicPath: clientConfig.output.publicPath
    })
    clientCompiler.hooks.done.tap('client', () => {
        clientManifest = JSON.parse(clientDevMiddleware.context.outputFileSystem.readFileSync('./dist/vue-ssr-client-manifest.json'))
        // 更新 Renderer
        update()
    })
    // 重要！将内存中的资源通过 Express 中间件对外公开访问
    app.use(clientDevMiddleware)
    // 挂载热更新的中间件
    app.use(
        hotMiddleware(clientCompiler, {
            noInfo: true, //
            publicPath: clientConfig.output.publicPath
        })
    )
    return onReady
}
